name: SafeSnap CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop", "phase*" ]
  pull_request:
    branches: [ "main" ]

env:
  JAVA_VERSION: '21'
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  # Job 1: Build and Test
  test:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    
    services:
      # PostgreSQL for integration tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: safesnap_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 📦 Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔧 Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: 🏗️ Build Application
        run: ./gradlew clean build -x test

      - name: 🧪 Run Unit Tests
        run: ./gradlew test --parallel
        env:
          # Test environment variables
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          GOOGLE_VISION_MOCK_MODE: true
          RATE_LIMITING_ENABLED: false

      - name: 🥒 Run BDD Tests (Cucumber)
        run: ./gradlew test --tests="*CucumberIntegrationTest*"
        env:
          SPRING_PROFILES_ACTIVE: test
          GOOGLE_VISION_MOCK_MODE: true
          RATE_LIMITING_ENABLED: false

      - name: 📊 Generate Test Coverage Report
        run: ./gradlew jacocoTestReport

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          name: safesnap-coverage

      - name: 🔍 Check Test Coverage
        run: ./gradlew jacocoTestCoverageVerification

      - name: 📋 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/reports/jacoco/
            target/cucumber-reports/

  # Job 2: Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🔧 Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: 🔍 Run Dependency Check
        run: ./gradlew dependencyCheckAnalyze || true

      - name: 🛡️ Run OWASP Security Scan
        uses: jeremylong/dependency-check-action@main
        with:
          project: 'SafeSnap'
          path: '.'
          format: 'JSON'
          outputDir: 'build/reports/dependency-check'

      - name: 📋 Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: build/reports/dependency-check/

  # Job 3: Build Docker Image
  docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🔧 Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: 🏗️ Build JAR
        run: ./gradlew bootJar

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/safesnap-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🚀 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: API Documentation
  docs:
    name: 📚 Generate API Docs
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🔧 Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: 🏗️ Build Application
        run: ./gradlew bootJar

      - name: 🚀 Start Application for Docs
        run: |
          java -jar build/libs/*.jar &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          # Wait for app to start
          sleep 30

      - name: 📚 Generate OpenAPI Docs
        run: |
          curl -o openapi.json http://localhost:8080/api/docs
          curl -o api-docs.html http://localhost:8080/api/swagger-ui/index.html

      - name: 🛑 Stop Application
        run: kill $APP_PID || true

      - name: 📋 Upload API Documentation
        uses: actions/upload-artifact@v3
        with:
          name: api-documentation
          path: |
            openapi.json
            api-docs.html

  # Job 5: Performance Tests
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🔧 Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: 🏗️ Build Application
        run: ./gradlew bootJar

      - name: 🚀 Start Application
        run: |
          java -jar build/libs/*.jar &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          sleep 30

      - name: ⚡ Run Load Tests
        run: |
          # Simple load test using curl
          echo "Testing authentication endpoint performance..."
          time for i in {1..10}; do
            curl -s -X POST http://localhost:8080/api/auth/login \
              -H "Content-Type: application/json" \
              -d '{"email":"test@example.com","password":"test"}'
          done
          
          echo "Testing metrics endpoint..."
          time curl -s http://localhost:8080/api/metrics/summary

      - name: 🛑 Stop Application
        run: kill $APP_PID || true

  # Job 6: Deploy to Staging (on main branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying SafeSnap to staging environment..."
          echo "Docker image: ${{ secrets.DOCKER_USERNAME }}/safesnap-backend:main"
          echo "Environment: staging"
          echo "Database: ${{ secrets.STAGING_DB_HOST }}"
          
          # In a real deployment, you would:
          # 1. SSH to staging server
          # 2. Pull latest Docker image
          # 3. Update environment variables
          # 4. Restart services
          # 5. Run smoke tests
          
          echo "✅ Staging deployment completed"

      - name: 🧪 Run Smoke Tests
        run: |
          echo "Running smoke tests against staging..."
          # Wait for deployment
          sleep 60
          
          # Test health endpoint
          curl -f ${{ secrets.STAGING_URL }}/actuator/health || exit 1
          
          # Test API documentation
          curl -f ${{ secrets.STAGING_URL }}/api/swagger-ui/ || exit 1
          
          echo "✅ Smoke tests passed"

  # Job 7: Notify
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test, security, docker, docs]
    if: always()

    steps:
      - name: 📢 Notify Success
        if: needs.test.result == 'success' && needs.security.result == 'success'
        run: |
          echo "✅ SafeSnap CI/CD Pipeline completed successfully!"
          echo "🧪 Tests: ${{ needs.test.result }}"
          echo "🔒 Security: ${{ needs.security.result }}"
          echo "🐳 Docker: ${{ needs.docker.result }}"
          echo "📚 Docs: ${{ needs.docs.result }}"

      - name: 📢 Notify Failure
        if: needs.test.result == 'failure' || needs.security.result == 'failure'
        run: |
          echo "❌ SafeSnap CI/CD Pipeline failed!"
          echo "🧪 Tests: ${{ needs.test.result }}"
          echo "🔒 Security: ${{ needs.security.result }}"
          echo "🐳 Docker: ${{ needs.docker.result }}"
          echo "📚 Docs: ${{ needs.docs.result }}"
          exit 1

      # Optional: Slack notification
      - name: 📱 Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#safesnap-ci'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
